{"ast":null,"code":"\"use client\";\n\n// packages/react/radio-group/src/RadioGroup.tsx\nimport * as React2 from \"react\";\nimport { composeEventHandlers as composeEventHandlers2 } from \"@radix-ui/primitive\";\nimport { useComposedRefs as useComposedRefs2 } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope as createContextScope2 } from \"@radix-ui/react-context\";\nimport { Primitive as Primitive2 } from \"@radix-ui/react-primitive\";\nimport * as RovingFocusGroup from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope } from \"@radix-ui/react-roving-focus\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { useDirection } from \"@radix-ui/react-direction\";\n\n// packages/react/radio-group/src/Radio.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar RADIO_NAME = \"Radio\";\nvar [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\nvar [RadioProvider, useRadioContext] = createRadioContext(RADIO_NAME);\nvar Radio = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadio,\n    name,\n    checked = false,\n    required,\n    disabled,\n    value = \"on\",\n    onCheck,\n    form,\n    ...radioProps\n  } = props;\n  const [button, setButton] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setButton(node));\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = button ? form || !!button.closest(\"form\") : true;\n  return /* @__PURE__ */jsxs(RadioProvider, {\n    scope: __scopeRadio,\n    checked,\n    disabled,\n    children: [/* @__PURE__ */jsx(Primitive.button, {\n      type: \"button\",\n      role: \"radio\",\n      \"aria-checked\": checked,\n      \"data-state\": getState(checked),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      value,\n      ...radioProps,\n      ref: composedRefs,\n      onClick: composeEventHandlers(props.onClick, event => {\n        if (!checked) onCheck?.();\n        if (isFormControl) {\n          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n          if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n        }\n      })\n    }), isFormControl && /* @__PURE__ */jsx(BubbleInput, {\n      control: button,\n      bubbles: !hasConsumerStoppedPropagationRef.current,\n      name,\n      value,\n      checked,\n      required,\n      disabled,\n      form,\n      style: {\n        transform: \"translateX(-100%)\"\n      }\n    })]\n  });\n});\nRadio.displayName = RADIO_NAME;\nvar INDICATOR_NAME = \"RadioIndicator\";\nvar RadioIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadio,\n    forceMount,\n    ...indicatorProps\n  } = props;\n  const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.checked,\n    children: /* @__PURE__ */jsx(Primitive.span, {\n      \"data-state\": getState(context.checked),\n      \"data-disabled\": context.disabled ? \"\" : void 0,\n      ...indicatorProps,\n      ref: forwardedRef\n    })\n  });\n});\nRadioIndicator.displayName = INDICATOR_NAME;\nvar BubbleInput = props => {\n  const {\n    control,\n    checked,\n    bubbles = true,\n    ...inputProps\n  } = props;\n  const ref = React.useRef(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", {\n        bubbles\n      });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  return /* @__PURE__ */jsx(\"input\", {\n    type: \"radio\",\n    \"aria-hidden\": true,\n    defaultChecked: checked,\n    ...inputProps,\n    tabIndex: -1,\n    ref,\n    style: {\n      ...props.style,\n      ...controlSize,\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      opacity: 0,\n      margin: 0\n    }\n  });\n};\nfunction getState(checked) {\n  return checked ? \"checked\" : \"unchecked\";\n}\n\n// packages/react/radio-group/src/RadioGroup.tsx\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar ARROW_KEYS = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\nvar RADIO_GROUP_NAME = \"RadioGroup\";\nvar [createRadioGroupContext, createRadioGroupScope] = createContextScope2(RADIO_GROUP_NAME, [createRovingFocusGroupScope, createRadioScope]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar useRadioScope = createRadioScope();\nvar [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME);\nvar RadioGroup = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    name,\n    defaultValue,\n    value: valueProp,\n    required = false,\n    disabled = false,\n    orientation,\n    dir,\n    loop = true,\n    onValueChange,\n    ...groupProps\n  } = props;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n  const direction = useDirection(dir);\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange\n  });\n  return /* @__PURE__ */jsx2(RadioGroupProvider, {\n    scope: __scopeRadioGroup,\n    name,\n    required,\n    disabled,\n    value,\n    onValueChange: setValue,\n    children: /* @__PURE__ */jsx2(RovingFocusGroup.Root, {\n      asChild: true,\n      ...rovingFocusGroupScope,\n      orientation,\n      dir: direction,\n      loop,\n      children: /* @__PURE__ */jsx2(Primitive2.div, {\n        role: \"radiogroup\",\n        \"aria-required\": required,\n        \"aria-orientation\": orientation,\n        \"data-disabled\": disabled ? \"\" : void 0,\n        dir: direction,\n        ...groupProps,\n        ref: forwardedRef\n      })\n    })\n  });\n});\nRadioGroup.displayName = RADIO_GROUP_NAME;\nvar ITEM_NAME = \"RadioGroupItem\";\nvar RadioGroupItem = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    disabled,\n    ...itemProps\n  } = props;\n  const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n  const isDisabled = context.disabled || disabled;\n  const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n  const radioScope = useRadioScope(__scopeRadioGroup);\n  const ref = React2.useRef(null);\n  const composedRefs = useComposedRefs2(forwardedRef, ref);\n  const checked = context.value === itemProps.value;\n  const isArrowKeyPressedRef = React2.useRef(false);\n  React2.useEffect(() => {\n    const handleKeyDown = event => {\n      if (ARROW_KEYS.includes(event.key)) {\n        isArrowKeyPressedRef.current = true;\n      }\n    };\n    const handleKeyUp = () => isArrowKeyPressedRef.current = false;\n    document.addEventListener(\"keydown\", handleKeyDown);\n    document.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      document.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n  return /* @__PURE__ */jsx2(RovingFocusGroup.Item, {\n    asChild: true,\n    ...rovingFocusGroupScope,\n    focusable: !isDisabled,\n    active: checked,\n    children: /* @__PURE__ */jsx2(Radio, {\n      disabled: isDisabled,\n      required: context.required,\n      checked,\n      ...radioScope,\n      ...itemProps,\n      name: context.name,\n      ref: composedRefs,\n      onCheck: () => context.onValueChange(itemProps.value),\n      onKeyDown: composeEventHandlers2(event => {\n        if (event.key === \"Enter\") event.preventDefault();\n      }),\n      onFocus: composeEventHandlers2(itemProps.onFocus, () => {\n        if (isArrowKeyPressedRef.current) ref.current?.click();\n      })\n    })\n  });\n});\nRadioGroupItem.displayName = ITEM_NAME;\nvar INDICATOR_NAME2 = \"RadioGroupIndicator\";\nvar RadioGroupIndicator = React2.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRadioGroup,\n    ...indicatorProps\n  } = props;\n  const radioScope = useRadioScope(__scopeRadioGroup);\n  return /* @__PURE__ */jsx2(RadioIndicator, {\n    ...radioScope,\n    ...indicatorProps,\n    ref: forwardedRef\n  });\n});\nRadioGroupIndicator.displayName = INDICATOR_NAME2;\nvar Root2 = RadioGroup;\nvar Item2 = RadioGroupItem;\nvar Indicator = RadioGroupIndicator;\nexport { Indicator, Item2 as Item, RadioGroup, RadioGroupIndicator, RadioGroupItem, Root2 as Root, createRadioGroupScope };","map":{"version":3,"names":["React2","composeEventHandlers","composeEventHandlers2","useComposedRefs","useComposedRefs2","createContextScope","createContextScope2","Primitive","Primitive2","RovingFocusGroup","createRovingFocusGroupScope","useControllableState","useDirection","React","useSize","usePrevious","Presence","jsx","jsxs","RADIO_NAME","createRadioContext","createRadioScope","RadioProvider","useRadioContext","Radio","forwardRef","props","forwardedRef","__scopeRadio","name","checked","required","disabled","value","onCheck","form","radioProps","button","setButton","useState","composedRefs","node","hasConsumerStoppedPropagationRef","useRef","isFormControl","closest","scope","children","type","role","getState","ref","onClick","event","current","isPropagationStopped","stopPropagation","BubbleInput","control","bubbles","style","transform","displayName","INDICATOR_NAME","RadioIndicator","forceMount","indicatorProps","context","present","span","inputProps","prevChecked","controlSize","useEffect","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","setChecked","set","Event","call","dispatchEvent","defaultChecked","tabIndex","position","pointerEvents","opacity","margin","jsx2","ARROW_KEYS","RADIO_GROUP_NAME","createRadioGroupContext","createRadioGroupScope","useRovingFocusGroupScope","useRadioScope","RadioGroupProvider","useRadioGroupContext","RadioGroup","__scopeRadioGroup","defaultValue","valueProp","orientation","dir","loop","onValueChange","groupProps","rovingFocusGroupScope","direction","setValue","prop","defaultProp","onChange","Root","asChild","div","ITEM_NAME","RadioGroupItem","itemProps","isDisabled","radioScope","isArrowKeyPressedRef","handleKeyDown","includes","key","handleKeyUp","document","addEventListener","removeEventListener","Item","focusable","active","onKeyDown","preventDefault","onFocus","click","INDICATOR_NAME2","RadioGroupIndicator","Root2","Item2","Indicator"],"sources":["C:\\Users\\Seulgi Baek\\vscode\\databasedesign\\database_project\\frontend\\node_modules\\@radix-ui\\react-radio-group\\src\\RadioGroup.tsx","C:\\Users\\Seulgi Baek\\vscode\\databasedesign\\database_project\\frontend\\node_modules\\@radix-ui\\react-radio-group\\src\\Radio.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { Radio, RadioIndicator, createRadioScope } from './Radio';\n\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ARROW_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroup\n * -----------------------------------------------------------------------------------------------*/\nconst RADIO_GROUP_NAME = 'RadioGroup';\n\ntype ScopedProps<P> = P & { __scopeRadioGroup?: Scope };\nconst [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME, [\n  createRovingFocusGroupScope,\n  createRadioScope,\n]);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useRadioScope = createRadioScope();\n\ntype RadioGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value?: string;\n  onValueChange(value: string): void;\n};\n\nconst [RadioGroupProvider, useRadioGroupContext] =\n  createRadioGroupContext<RadioGroupContextValue>(RADIO_GROUP_NAME);\n\ntype RadioGroupElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RadioGroupProps extends PrimitiveDivProps {\n  name?: RadioGroupContextValue['name'];\n  required?: React.ComponentPropsWithoutRef<typeof Radio>['required'];\n  disabled?: React.ComponentPropsWithoutRef<typeof Radio>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string;\n  value?: RadioGroupContextValue['value'];\n  onValueChange?: RadioGroupContextValue['onValueChange'];\n}\n\nconst RadioGroup = React.forwardRef<RadioGroupElement, RadioGroupProps>(\n  (props: ScopedProps<RadioGroupProps>, forwardedRef) => {\n    const {\n      __scopeRadioGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    return (\n      <RadioGroupProvider\n        scope={__scopeRadioGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onValueChange={setValue}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"radiogroup\"\n            aria-required={required}\n            aria-orientation={orientation}\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </RadioGroupProvider>\n    );\n  }\n);\n\nRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RadioGroupItem';\n\ntype RadioGroupItemElement = React.ElementRef<typeof Radio>;\ntype RadioProps = React.ComponentPropsWithoutRef<typeof Radio>;\ninterface RadioGroupItemProps extends Omit<RadioProps, 'onCheck' | 'name'> {\n  value: string;\n}\n\nconst RadioGroupItem = React.forwardRef<RadioGroupItemElement, RadioGroupItemProps>(\n  (props: ScopedProps<RadioGroupItemProps>, forwardedRef) => {\n    const { __scopeRadioGroup, disabled, ...itemProps } = props;\n    const context = useRadioGroupContext(ITEM_NAME, __scopeRadioGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeRadioGroup);\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    const ref = React.useRef<React.ElementRef<typeof Radio>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value === itemProps.value;\n    const isArrowKeyPressedRef = React.useRef(false);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (ARROW_KEYS.includes(event.key)) {\n          isArrowKeyPressedRef.current = true;\n        }\n      };\n      const handleKeyUp = () => (isArrowKeyPressedRef.current = false);\n      document.addEventListener('keydown', handleKeyDown);\n      document.addEventListener('keyup', handleKeyUp);\n      return () => {\n        document.removeEventListener('keydown', handleKeyDown);\n        document.removeEventListener('keyup', handleKeyUp);\n      };\n    }, []);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <Radio\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...radioScope}\n          {...itemProps}\n          name={context.name}\n          ref={composedRefs}\n          onCheck={() => context.onValueChange(itemProps.value)}\n          onKeyDown={composeEventHandlers((event) => {\n            // According to WAI ARIA, radio groups don't activate items on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onFocus={composeEventHandlers(itemProps.onFocus, () => {\n            /**\n             * Our `RovingFocusGroup` will focus the radio when navigating with arrow keys\n             * and we need to \"check\" it in that case. We click it to \"check\" it (instead\n             * of updating `context.value`) so that the radio change event fires.\n             */\n            if (isArrowKeyPressedRef.current) ref.current?.click();\n          })}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nRadioGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioGroupIndicator';\n\ntype RadioGroupIndicatorElement = React.ElementRef<typeof RadioIndicator>;\ntype RadioIndicatorProps = React.ComponentPropsWithoutRef<typeof RadioIndicator>;\ninterface RadioGroupIndicatorProps extends RadioIndicatorProps {}\n\nconst RadioGroupIndicator = React.forwardRef<RadioGroupIndicatorElement, RadioGroupIndicatorProps>(\n  (props: ScopedProps<RadioGroupIndicatorProps>, forwardedRef) => {\n    const { __scopeRadioGroup, ...indicatorProps } = props;\n    const radioScope = useRadioScope(__scopeRadioGroup);\n    return <RadioIndicator {...radioScope} {...indicatorProps} ref={forwardedRef} />;\n  }\n);\n\nRadioGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = RadioGroup;\nconst Item = RadioGroupItem;\nconst Indicator = RadioGroupIndicator;\n\nexport {\n  createRadioGroupScope,\n  //\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { RadioGroupProps, RadioGroupItemProps, RadioGroupIndicatorProps };\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Radio\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_NAME = 'Radio';\n\ntype ScopedProps<P> = P & { __scopeRadio?: Scope };\nconst [createRadioContext, createRadioScope] = createContextScope(RADIO_NAME);\n\ntype RadioContextValue = { checked: boolean; disabled?: boolean };\nconst [RadioProvider, useRadioContext] = createRadioContext<RadioContextValue>(RADIO_NAME);\n\ntype RadioElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface RadioProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  required?: boolean;\n  onCheck?(): void;\n}\n\nconst Radio = React.forwardRef<RadioElement, RadioProps>(\n  (props: ScopedProps<RadioProps>, forwardedRef) => {\n    const {\n      __scopeRadio,\n      name,\n      checked = false,\n      required,\n      disabled,\n      value = 'on',\n      onCheck,\n      form,\n      ...radioProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? form || !!button.closest('form') : true;\n\n    return (\n      <RadioProvider scope={__scopeRadio} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"radio\"\n          aria-checked={checked}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...radioProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            // radios cannot be unchecked so we only communicate a checked state\n            if (!checked) onCheck?.();\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if radio is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect radio updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            form={form}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </RadioProvider>\n    );\n  }\n);\n\nRadio.displayName = RADIO_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * RadioIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'RadioIndicator';\n\ntype RadioIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\nexport interface RadioIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst RadioIndicator = React.forwardRef<RadioIndicatorElement, RadioIndicatorProps>(\n  (props: ScopedProps<RadioIndicatorProps>, forwardedRef) => {\n    const { __scopeRadio, forceMount, ...indicatorProps } = props;\n    const context = useRadioContext(INDICATOR_NAME, __scopeRadio);\n    return (\n      <Presence present={forceMount || context.checked}>\n        <Primitive.span\n          data-state={getState(context.checked)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n        />\n      </Presence>\n    );\n  }\n);\n\nRadioIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = React.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"radio\"\n      aria-hidden\n      defaultChecked={checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nexport {\n  createRadioScope,\n  //\n  Radio,\n  RadioIndicator,\n};\nexport type { RadioProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}