{"ast":null,"code":"import * as o from \"react\";\nimport y from \"classnames\";\nimport * as t from \"@radix-ui/react-tooltip\";\nimport { Text as h } from \"./text.js\";\nimport { Theme as v } from \"./theme.js\";\nimport { extractProps as u } from \"../helpers/extract-props.js\";\nimport { tooltipPropDefs as R } from \"./tooltip.props.js\";\nconst e = o.forwardRef((i, p) => {\n  const {\n      children: r,\n      className: n,\n      open: s,\n      defaultOpen: l,\n      onOpenChange: m,\n      delayDuration: a,\n      disableHoverableContent: f,\n      content: P,\n      container: T,\n      forceMount: c,\n      ...d\n    } = u(i, R),\n    C = {\n      open: s,\n      defaultOpen: l,\n      onOpenChange: m,\n      delayDuration: a,\n      disableHoverableContent: f\n    };\n  return o.createElement(t.Root, {\n    ...C\n  }, o.createElement(t.Trigger, {\n    asChild: !0\n  }, r), o.createElement(t.Portal, {\n    container: T,\n    forceMount: c\n  }, o.createElement(v, {\n    asChild: !0\n  }, o.createElement(t.Content, {\n    sideOffset: 4,\n    collisionPadding: 10,\n    ...d,\n    asChild: !1,\n    ref: p,\n    className: y(\"rt-TooltipContent\", n)\n  }, o.createElement(h, {\n    as: \"p\",\n    className: \"rt-TooltipText\",\n    size: \"1\"\n  }, P), o.createElement(t.Arrow, {\n    className: \"rt-TooltipArrow\"\n  })))));\n});\ne.displayName = \"Tooltip\";\nexport { e as Tooltip };","map":{"version":3,"names":["o","y","t","Text","h","Theme","v","extractProps","u","tooltipPropDefs","R","e","forwardRef","i","p","children","r","className","n","open","s","defaultOpen","l","onOpenChange","m","delayDuration","a","disableHoverableContent","f","content","P","container","T","forceMount","c","d","C","createElement","Root","Trigger","asChild","Portal","Content","sideOffset","collisionPadding","ref","as","size","Arrow","displayName","Tooltip"],"sources":["C:\\Users\\Seulgi Baek\\vscode\\databasedesign\\database_project\\frontend\\node_modules\\@radix-ui\\themes\\src\\components\\tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\n\nimport { Text } from './text.js';\nimport { Theme } from './theme.js';\nimport { extractProps } from '../helpers/extract-props.js';\nimport { tooltipPropDefs } from './tooltip.props.js';\n\nimport type { ComponentPropsWithout, RemovedProps } from '../helpers/component-props.js';\nimport type { GetPropDefTypes } from '../props/prop-def.js';\n\ntype TooltipElement = React.ElementRef<typeof TooltipPrimitive.Content>;\ntype TooltipOwnProps = GetPropDefTypes<typeof tooltipPropDefs>;\ninterface TooltipProps\n  extends React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root>,\n    ComponentPropsWithout<typeof TooltipPrimitive.Content, RemovedProps | 'content'>,\n    TooltipOwnProps {\n  content: React.ReactNode;\n  container?: React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Portal>['container'];\n}\nconst Tooltip = React.forwardRef<TooltipElement, TooltipProps>((props, forwardedRef) => {\n  const {\n    children,\n    className,\n    open,\n    defaultOpen,\n    onOpenChange,\n    delayDuration,\n    disableHoverableContent,\n    content,\n    container,\n    forceMount,\n    ...tooltipContentProps\n  } = extractProps(props, tooltipPropDefs);\n  const rootProps = { open, defaultOpen, onOpenChange, delayDuration, disableHoverableContent };\n  return (\n    <TooltipPrimitive.Root {...rootProps}>\n      <TooltipPrimitive.Trigger asChild>{children}</TooltipPrimitive.Trigger>\n      <TooltipPrimitive.Portal container={container} forceMount={forceMount}>\n        <Theme asChild>\n          <TooltipPrimitive.Content\n            sideOffset={4}\n            collisionPadding={10}\n            {...tooltipContentProps}\n            asChild={false}\n            ref={forwardedRef}\n            className={classNames('rt-TooltipContent', className)}\n          >\n            <Text as=\"p\" className=\"rt-TooltipText\" size=\"1\">\n              {content}\n            </Text>\n            <TooltipPrimitive.Arrow className=\"rt-TooltipArrow\" />\n          </TooltipPrimitive.Content>\n        </Theme>\n      </TooltipPrimitive.Portal>\n    </TooltipPrimitive.Root>\n  );\n});\nTooltip.displayName = 'Tooltip';\n\nexport { Tooltip };\nexport type { TooltipProps };\n"],"mappings":"AAAA,YAAYA,CAAA,MAAW;AACvB,OAAOC,CAAA,MAAgB;AACvB,YAAYC,CAAA,MAAsB;AAElC,SAASC,IAAA,IAAAC,CAAA,QAAY;AACrB,SAASC,KAAA,IAAAC,CAAA,QAAa;AACtB,SAASC,YAAA,IAAAC,CAAA,QAAoB;AAC7B,SAASC,eAAA,IAAAC,CAAA,QAAuB;AAchC,MAAMC,CAAA,GAAUX,CAAA,CAAMY,UAAA,CAAyC,CAACC,CAAA,EAAOC,CAAA,KAAiB;EACtF,MAAM;MACJC,QAAA,EAAAC,CAAA;MACAC,SAAA,EAAAC,CAAA;MACAC,IAAA,EAAAC,CAAA;MACAC,WAAA,EAAAC,CAAA;MACAC,YAAA,EAAAC,CAAA;MACAC,aAAA,EAAAC,CAAA;MACAC,uBAAA,EAAAC,CAAA;MACAC,OAAA,EAAAC,CAAA;MACAC,SAAA,EAAAC,CAAA;MACAC,UAAA,EAAAC,CAAA;MACA,GAAGC;IACL,IAAI3B,CAAA,CAAaK,CAAA,EAAOH,CAAe;IACjC0B,CAAA,GAAY;MAAEjB,IAAA,EAAAC,CAAA;MAAMC,WAAA,EAAAC,CAAA;MAAaC,YAAA,EAAAC,CAAA;MAAcC,aAAA,EAAAC,CAAA;MAAeC,uBAAA,EAAAC;IAAwB;EAC5F,OACE5B,CAAA,CAAAqC,aAAA,CAACnC,CAAA,CAAiBoC,IAAA,EAAjB;IAAuB,GAAGF;EAAA,GACzBpC,CAAA,CAAAqC,aAAA,CAACnC,CAAA,CAAiBqC,OAAA,EAAjB;IAAyBC,OAAA,EAAO;EAAA,GAAExB,CAAS,GAC5ChB,CAAA,CAAAqC,aAAA,CAACnC,CAAA,CAAiBuC,MAAA,EAAjB;IAAwBV,SAAA,EAAWC,CAAA;IAAWC,UAAA,EAAYC;EAAA,GACzDlC,CAAA,CAAAqC,aAAA,CAAC/B,CAAA;IAAMkC,OAAA,EAAO;EAAA,GACZxC,CAAA,CAAAqC,aAAA,CAACnC,CAAA,CAAiBwC,OAAA,EAAjB;IACCC,UAAA,EAAY;IACZC,gBAAA,EAAkB;IACjB,GAAGT,CAAA;IACJK,OAAA,EAAS;IACTK,GAAA,EAAK/B,CAAA;IACLG,SAAA,EAAWhB,CAAA,CAAW,qBAAqBiB,CAAS;EAAA,GAEpDlB,CAAA,CAAAqC,aAAA,CAACjC,CAAA;IAAK0C,EAAA,EAAG;IAAI7B,SAAA,EAAU;IAAiB8B,IAAA,EAAK;EAAA,GAC1CjB,CACH,GACA9B,CAAA,CAAAqC,aAAA,CAACnC,CAAA,CAAiB8C,KAAA,EAAjB;IAAuB/B,SAAA,EAAU;EAAA,CAAkB,CACtD,CACF,CACF,CACF,CAEJ;AAAA,CAAC;AACDN,CAAA,CAAQsC,WAAA,GAAc;AAAA,SAAAtC,CAAA,IAAAuC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}