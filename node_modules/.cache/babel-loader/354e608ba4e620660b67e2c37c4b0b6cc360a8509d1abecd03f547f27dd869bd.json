{"ast":null,"code":"\"use client\";\n\nimport * as e from \"react\";\nimport C from \"classnames\";\nimport * as t from \"@radix-ui/react-checkbox\";\nimport { useControllableState as f } from \"@radix-ui/react-use-controllable-state\";\nimport { checkboxPropDefs as d } from \"./checkbox.props.js\";\nimport { ThickCheckIcon as l, ThickDividerHorizontalIcon as x } from \"./icons.js\";\nimport { extractProps as P } from \"../helpers/extract-props.js\";\nimport { marginPropDefs as b } from \"../props/margin.props.js\";\nconst c = e.forwardRef((p, i) => {\n  const {\n      className: s,\n      color: h,\n      checked: a,\n      defaultChecked: o,\n      onCheckedChange: m,\n      ...n\n    } = P(p, d, b),\n    [r, k] = f({\n      prop: a,\n      defaultProp: o,\n      onChange: m\n    });\n  return e.createElement(t.Root, {\n    \"data-accent-color\": h,\n    ...n,\n    defaultChecked: o,\n    checked: r,\n    onCheckedChange: k,\n    asChild: !1,\n    ref: i,\n    className: C(\"rt-reset\", \"rt-BaseCheckboxRoot\", \"rt-CheckboxRoot\", s)\n  }, e.createElement(t.Indicator, {\n    asChild: !0,\n    className: \"rt-BaseCheckboxIndicator rt-CheckboxIndicator\"\n  }, e.createElement(r === \"indeterminate\" ? x : l, null)));\n});\nc.displayName = \"Checkbox\";\nexport { c as Checkbox };","map":{"version":3,"names":["e","C","t","useControllableState","f","checkboxPropDefs","d","ThickCheckIcon","l","ThickDividerHorizontalIcon","x","extractProps","P","marginPropDefs","b","c","forwardRef","p","i","className","s","color","h","checked","a","defaultChecked","o","onCheckedChange","m","n","r","k","prop","defaultProp","onChange","createElement","Root","asChild","ref","Indicator","displayName","Checkbox"],"sources":["C:\\Users\\Seulgi Baek\\vscode\\databasedesign\\database_project\\frontend\\node_modules\\@radix-ui\\themes\\src\\components\\checkbox.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport { checkboxPropDefs } from './checkbox.props.js';\nimport { ThickCheckIcon, ThickDividerHorizontalIcon } from './icons.js';\nimport { extractProps } from '../helpers/extract-props.js';\nimport { marginPropDefs } from '../props/margin.props.js';\n\nimport type { MarginProps } from '../props/margin.props.js';\nimport type { ComponentPropsWithout } from '../helpers/component-props.js';\nimport type { GetPropDefTypes } from '../props/prop-def.js';\n\ntype CheckboxElement = React.ElementRef<typeof CheckboxPrimitive.Root>;\ntype CheckboxOwnProps = GetPropDefTypes<typeof checkboxPropDefs>;\ninterface CheckboxProps\n  extends ComponentPropsWithout<\n      typeof CheckboxPrimitive.Root,\n      'asChild' | 'color' | 'defaultValue' | 'children'\n    >,\n    MarginProps,\n    CheckboxOwnProps {}\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>((props, forwardedRef) => {\n  const {\n    className,\n    color,\n    checked: checkedProp,\n    defaultChecked: defaultCheckedProp,\n    onCheckedChange,\n    ...checkboxProps\n  } = extractProps(props, checkboxPropDefs, marginPropDefs);\n\n  const [checked, setChecked] = useControllableState({\n    prop: checkedProp,\n    defaultProp: defaultCheckedProp,\n    onChange: onCheckedChange,\n  });\n\n  return (\n    <CheckboxPrimitive.Root\n      data-accent-color={color}\n      {...checkboxProps}\n      defaultChecked={defaultCheckedProp}\n      checked={checked}\n      onCheckedChange={setChecked}\n      asChild={false}\n      ref={forwardedRef}\n      className={classNames('rt-reset', 'rt-BaseCheckboxRoot', 'rt-CheckboxRoot', className)}\n    >\n      <CheckboxPrimitive.Indicator\n        asChild\n        className=\"rt-BaseCheckboxIndicator rt-CheckboxIndicator\"\n      >\n        {checked === 'indeterminate' ? <ThickDividerHorizontalIcon /> : <ThickCheckIcon />}\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  );\n});\nCheckbox.displayName = 'Checkbox';\n\nexport { Checkbox };\nexport type { CheckboxProps };\n"],"mappings":";;AAEA,YAAYA,CAAA,MAAW;AACvB,OAAOC,CAAA,MAAgB;AACvB,YAAYC,CAAA,MAAuB;AACnC,SAASC,oBAAA,IAAAC,CAAA,QAA4B;AAErC,SAASC,gBAAA,IAAAC,CAAA,QAAwB;AACjC,SAASC,cAAA,IAAAC,CAAA,EAAgBC,0BAAA,IAAAC,CAAA,QAAkC;AAC3D,SAASC,YAAA,IAAAC,CAAA,QAAoB;AAC7B,SAASC,cAAA,IAAAC,CAAA,QAAsB;AAe/B,MAAMC,CAAA,GAAWf,CAAA,CAAMgB,UAAA,CAA2C,CAACC,CAAA,EAAOC,CAAA,KAAiB;EACzF,MAAM;MACJC,SAAA,EAAAC,CAAA;MACAC,KAAA,EAAAC,CAAA;MACAC,OAAA,EAASC,CAAA;MACTC,cAAA,EAAgBC,CAAA;MAChBC,eAAA,EAAAC,CAAA;MACA,GAAGC;IACL,IAAIjB,CAAA,CAAaK,CAAA,EAAOX,CAAA,EAAkBQ,CAAc;IAElD,CAACgB,CAAA,EAASC,CAAU,IAAI3B,CAAA,CAAqB;MACjD4B,IAAA,EAAMR,CAAA;MACNS,WAAA,EAAaP,CAAA;MACbQ,QAAA,EAAUN;IACZ,CAAC;EAED,OACE5B,CAAA,CAAAmC,aAAA,CAACjC,CAAA,CAAkBkC,IAAA,EAAlB;IACC,qBAAmBd,CAAA;IAClB,GAAGO,CAAA;IACJJ,cAAA,EAAgBC,CAAA;IAChBH,OAAA,EAASO,CAAA;IACTH,eAAA,EAAiBI,CAAA;IACjBM,OAAA,EAAS;IACTC,GAAA,EAAKpB,CAAA;IACLC,SAAA,EAAWlB,CAAA,CAAW,YAAY,uBAAuB,mBAAmBmB,CAAS;EAAA,GAErFpB,CAAA,CAAAmC,aAAA,CAACjC,CAAA,CAAkBqC,SAAA,EAAlB;IACCF,OAAA,EAAO;IACPlB,SAAA,EAAU;EAAA,GAEqBnB,CAAA,CAAAmC,aAAA,CAA9BL,CAAA,KAAY,kBAAmBpB,CAAA,GAAiCF,CAAA,EAAjC,IAA2B,CAC7D,CACF,CAEJ;AAAA,CAAC;AACDO,CAAA,CAASyB,WAAA,GAAc;AAAA,SAAAzB,CAAA,IAAA0B,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}