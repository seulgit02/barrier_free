{"ast":null,"code":"\"use client\";\n\n// packages/react/context-menu/src/ContextMenu.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport * as MenuPrimitive from \"@radix-ui/react-menu\";\nimport { createMenuScope } from \"@radix-ui/react-menu\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar CONTEXT_MENU_NAME = \"ContextMenu\";\nvar [createContextMenuContext, createContextMenuScope] = createContextScope(CONTEXT_MENU_NAME, [createMenuScope]);\nvar useMenuScope = createMenuScope();\nvar [ContextMenuProvider, useContextMenuContext] = createContextMenuContext(CONTEXT_MENU_NAME);\nvar ContextMenu = props => {\n  const {\n    __scopeContextMenu,\n    children,\n    onOpenChange,\n    dir,\n    modal = true\n  } = props;\n  const [open, setOpen] = React.useState(false);\n  const menuScope = useMenuScope(__scopeContextMenu);\n  const handleOpenChangeProp = useCallbackRef(onOpenChange);\n  const handleOpenChange = React.useCallback(open2 => {\n    setOpen(open2);\n    handleOpenChangeProp(open2);\n  }, [handleOpenChangeProp]);\n  return /* @__PURE__ */jsx(ContextMenuProvider, {\n    scope: __scopeContextMenu,\n    open,\n    onOpenChange: handleOpenChange,\n    modal,\n    children: /* @__PURE__ */jsx(MenuPrimitive.Root, {\n      ...menuScope,\n      dir,\n      open,\n      onOpenChange: handleOpenChange,\n      modal,\n      children\n    })\n  });\n};\nContextMenu.displayName = CONTEXT_MENU_NAME;\nvar TRIGGER_NAME = \"ContextMenuTrigger\";\nvar ContextMenuTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    disabled = false,\n    ...triggerProps\n  } = props;\n  const context = useContextMenuContext(TRIGGER_NAME, __scopeContextMenu);\n  const menuScope = useMenuScope(__scopeContextMenu);\n  const pointRef = React.useRef({\n    x: 0,\n    y: 0\n  });\n  const virtualRef = React.useRef({\n    getBoundingClientRect: () => DOMRect.fromRect({\n      width: 0,\n      height: 0,\n      ...pointRef.current\n    })\n  });\n  const longPressTimerRef = React.useRef(0);\n  const clearLongPress = React.useCallback(() => window.clearTimeout(longPressTimerRef.current), []);\n  const handleOpen = event => {\n    pointRef.current = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    context.onOpenChange(true);\n  };\n  React.useEffect(() => clearLongPress, [clearLongPress]);\n  React.useEffect(() => void (disabled && clearLongPress()), [disabled, clearLongPress]);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(MenuPrimitive.Anchor, {\n      ...menuScope,\n      virtualRef\n    }), /* @__PURE__ */jsx(Primitive.span, {\n      \"data-state\": context.open ? \"open\" : \"closed\",\n      \"data-disabled\": disabled ? \"\" : void 0,\n      ...triggerProps,\n      ref: forwardedRef,\n      style: {\n        WebkitTouchCallout: \"none\",\n        ...props.style\n      },\n      onContextMenu: disabled ? props.onContextMenu : composeEventHandlers(props.onContextMenu, event => {\n        clearLongPress();\n        handleOpen(event);\n        event.preventDefault();\n      }),\n      onPointerDown: disabled ? props.onPointerDown : composeEventHandlers(props.onPointerDown, whenTouchOrPen(event => {\n        clearLongPress();\n        longPressTimerRef.current = window.setTimeout(() => handleOpen(event), 700);\n      })),\n      onPointerMove: disabled ? props.onPointerMove : composeEventHandlers(props.onPointerMove, whenTouchOrPen(clearLongPress)),\n      onPointerCancel: disabled ? props.onPointerCancel : composeEventHandlers(props.onPointerCancel, whenTouchOrPen(clearLongPress)),\n      onPointerUp: disabled ? props.onPointerUp : composeEventHandlers(props.onPointerUp, whenTouchOrPen(clearLongPress))\n    })]\n  });\n});\nContextMenuTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"ContextMenuPortal\";\nvar ContextMenuPortal = props => {\n  const {\n    __scopeContextMenu,\n    ...portalProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Portal, {\n    ...menuScope,\n    ...portalProps\n  });\n};\nContextMenuPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"ContextMenuContent\";\nvar ContextMenuContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...contentProps\n  } = props;\n  const context = useContextMenuContext(CONTENT_NAME, __scopeContextMenu);\n  const menuScope = useMenuScope(__scopeContextMenu);\n  const hasInteractedOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(MenuPrimitive.Content, {\n    ...menuScope,\n    ...contentProps,\n    ref: forwardedRef,\n    side: \"right\",\n    sideOffset: 2,\n    align: \"start\",\n    onCloseAutoFocus: event => {\n      props.onCloseAutoFocus?.(event);\n      if (!event.defaultPrevented && hasInteractedOutsideRef.current) {\n        event.preventDefault();\n      }\n      hasInteractedOutsideRef.current = false;\n    },\n    onInteractOutside: event => {\n      props.onInteractOutside?.(event);\n      if (!event.defaultPrevented && !context.modal) hasInteractedOutsideRef.current = true;\n    },\n    style: {\n      ...props.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-context-menu-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-context-menu-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-context-menu-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-context-menu-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-context-menu-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nContextMenuContent.displayName = CONTENT_NAME;\nvar GROUP_NAME = \"ContextMenuGroup\";\nvar ContextMenuGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...groupProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Group, {\n    ...menuScope,\n    ...groupProps,\n    ref: forwardedRef\n  });\n});\nContextMenuGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"ContextMenuLabel\";\nvar ContextMenuLabel = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...labelProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Label, {\n    ...menuScope,\n    ...labelProps,\n    ref: forwardedRef\n  });\n});\nContextMenuLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"ContextMenuItem\";\nvar ContextMenuItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...itemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Item, {\n    ...menuScope,\n    ...itemProps,\n    ref: forwardedRef\n  });\n});\nContextMenuItem.displayName = ITEM_NAME;\nvar CHECKBOX_ITEM_NAME = \"ContextMenuCheckboxItem\";\nvar ContextMenuCheckboxItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...checkboxItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.CheckboxItem, {\n    ...menuScope,\n    ...checkboxItemProps,\n    ref: forwardedRef\n  });\n});\nContextMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\nvar RADIO_GROUP_NAME = \"ContextMenuRadioGroup\";\nvar ContextMenuRadioGroup = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...radioGroupProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.RadioGroup, {\n    ...menuScope,\n    ...radioGroupProps,\n    ref: forwardedRef\n  });\n});\nContextMenuRadioGroup.displayName = RADIO_GROUP_NAME;\nvar RADIO_ITEM_NAME = \"ContextMenuRadioItem\";\nvar ContextMenuRadioItem = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...radioItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.RadioItem, {\n    ...menuScope,\n    ...radioItemProps,\n    ref: forwardedRef\n  });\n});\nContextMenuRadioItem.displayName = RADIO_ITEM_NAME;\nvar INDICATOR_NAME = \"ContextMenuItemIndicator\";\nvar ContextMenuItemIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...itemIndicatorProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.ItemIndicator, {\n    ...menuScope,\n    ...itemIndicatorProps,\n    ref: forwardedRef\n  });\n});\nContextMenuItemIndicator.displayName = INDICATOR_NAME;\nvar SEPARATOR_NAME = \"ContextMenuSeparator\";\nvar ContextMenuSeparator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...separatorProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Separator, {\n    ...menuScope,\n    ...separatorProps,\n    ref: forwardedRef\n  });\n});\nContextMenuSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"ContextMenuArrow\";\nvar ContextMenuArrow = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...arrowProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.Arrow, {\n    ...menuScope,\n    ...arrowProps,\n    ref: forwardedRef\n  });\n});\nContextMenuArrow.displayName = ARROW_NAME;\nvar SUB_NAME = \"ContextMenuSub\";\nvar ContextMenuSub = props => {\n  const {\n    __scopeContextMenu,\n    children,\n    onOpenChange,\n    open: openProp,\n    defaultOpen\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */jsx(MenuPrimitive.Sub, {\n    ...menuScope,\n    open,\n    onOpenChange: setOpen,\n    children\n  });\n};\nContextMenuSub.displayName = SUB_NAME;\nvar SUB_TRIGGER_NAME = \"ContextMenuSubTrigger\";\nvar ContextMenuSubTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...triggerItemProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.SubTrigger, {\n    ...menuScope,\n    ...triggerItemProps,\n    ref: forwardedRef\n  });\n});\nContextMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\nvar SUB_CONTENT_NAME = \"ContextMenuSubContent\";\nvar ContextMenuSubContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeContextMenu,\n    ...subContentProps\n  } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return /* @__PURE__ */jsx(MenuPrimitive.SubContent, {\n    ...menuScope,\n    ...subContentProps,\n    ref: forwardedRef,\n    style: {\n      ...props.style,\n      // re-namespace exposed content custom properties\n      ...{\n        \"--radix-context-menu-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n        \"--radix-context-menu-content-available-width\": \"var(--radix-popper-available-width)\",\n        \"--radix-context-menu-content-available-height\": \"var(--radix-popper-available-height)\",\n        \"--radix-context-menu-trigger-width\": \"var(--radix-popper-anchor-width)\",\n        \"--radix-context-menu-trigger-height\": \"var(--radix-popper-anchor-height)\"\n      }\n    }\n  });\n});\nContextMenuSubContent.displayName = SUB_CONTENT_NAME;\nfunction whenTouchOrPen(handler) {\n  return event => event.pointerType !== \"mouse\" ? handler(event) : void 0;\n}\nvar Root2 = ContextMenu;\nvar Trigger = ContextMenuTrigger;\nvar Portal2 = ContextMenuPortal;\nvar Content2 = ContextMenuContent;\nvar Group2 = ContextMenuGroup;\nvar Label2 = ContextMenuLabel;\nvar Item2 = ContextMenuItem;\nvar CheckboxItem2 = ContextMenuCheckboxItem;\nvar RadioGroup2 = ContextMenuRadioGroup;\nvar RadioItem2 = ContextMenuRadioItem;\nvar ItemIndicator2 = ContextMenuItemIndicator;\nvar Separator2 = ContextMenuSeparator;\nvar Arrow2 = ContextMenuArrow;\nvar Sub2 = ContextMenuSub;\nvar SubTrigger2 = ContextMenuSubTrigger;\nvar SubContent2 = ContextMenuSubContent;\nexport { Arrow2 as Arrow, CheckboxItem2 as CheckboxItem, Content2 as Content, ContextMenu, ContextMenuArrow, ContextMenuCheckboxItem, ContextMenuContent, ContextMenuGroup, ContextMenuItem, ContextMenuItemIndicator, ContextMenuLabel, ContextMenuPortal, ContextMenuRadioGroup, ContextMenuRadioItem, ContextMenuSeparator, ContextMenuSub, ContextMenuSubContent, ContextMenuSubTrigger, ContextMenuTrigger, Group2 as Group, Item2 as Item, ItemIndicator2 as ItemIndicator, Label2 as Label, Portal2 as Portal, RadioGroup2 as RadioGroup, RadioItem2 as RadioItem, Root2 as Root, Separator2 as Separator, Sub2 as Sub, SubContent2 as SubContent, SubTrigger2 as SubTrigger, Trigger, createContextMenuScope };","map":{"version":3,"names":["React","composeEventHandlers","createContextScope","Primitive","MenuPrimitive","createMenuScope","useCallbackRef","useControllableState","Fragment","jsx","jsxs","CONTEXT_MENU_NAME","createContextMenuContext","createContextMenuScope","useMenuScope","ContextMenuProvider","useContextMenuContext","ContextMenu","props","__scopeContextMenu","children","onOpenChange","dir","modal","open","setOpen","useState","menuScope","handleOpenChangeProp","handleOpenChange","useCallback","open2","scope","Root","displayName","TRIGGER_NAME","ContextMenuTrigger","forwardRef","forwardedRef","disabled","triggerProps","context","pointRef","useRef","x","y","virtualRef","getBoundingClientRect","DOMRect","fromRect","width","height","current","longPressTimerRef","clearLongPress","window","clearTimeout","handleOpen","event","clientX","clientY","useEffect","Anchor","span","ref","style","WebkitTouchCallout","onContextMenu","preventDefault","onPointerDown","whenTouchOrPen","setTimeout","onPointerMove","onPointerCancel","onPointerUp","PORTAL_NAME","ContextMenuPortal","portalProps","Portal","CONTENT_NAME","ContextMenuContent","contentProps","hasInteractedOutsideRef","Content","side","sideOffset","align","onCloseAutoFocus","defaultPrevented","onInteractOutside","GROUP_NAME","ContextMenuGroup","groupProps","Group","LABEL_NAME","ContextMenuLabel","labelProps","Label","ITEM_NAME","ContextMenuItem","itemProps","Item","CHECKBOX_ITEM_NAME","ContextMenuCheckboxItem","checkboxItemProps","CheckboxItem","RADIO_GROUP_NAME","ContextMenuRadioGroup","radioGroupProps","RadioGroup","RADIO_ITEM_NAME","ContextMenuRadioItem","radioItemProps","RadioItem","INDICATOR_NAME","ContextMenuItemIndicator","itemIndicatorProps","ItemIndicator","SEPARATOR_NAME","ContextMenuSeparator","separatorProps","Separator","ARROW_NAME","ContextMenuArrow","arrowProps","Arrow","SUB_NAME","ContextMenuSub","openProp","defaultOpen","prop","defaultProp","onChange","Sub","SUB_TRIGGER_NAME","ContextMenuSubTrigger","triggerItemProps","SubTrigger","SUB_CONTENT_NAME","ContextMenuSubContent","subContentProps","SubContent","handler","pointerType","Root2","Trigger","Portal2","Content2","Group2","Label2","Item2","CheckboxItem2","RadioGroup2","RadioItem2","ItemIndicator2","Separator2","Arrow2","Sub2","SubTrigger2","SubContent2"],"sources":["C:\\Users\\Seulgi Baek\\vscode\\databasedesign\\database_project\\frontend\\node_modules\\@radix-ui\\react-context-menu\\src\\ContextMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\ntype Point = { x: number; y: number };\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTEXT_MENU_NAME = 'ContextMenu';\n\ntype ScopedProps<P> = P & { __scopeContextMenu?: Scope };\nconst [createContextMenuContext, createContextMenuScope] = createContextScope(CONTEXT_MENU_NAME, [\n  createMenuScope,\n]);\nconst useMenuScope = createMenuScope();\n\ntype ContextMenuContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  modal: boolean;\n};\n\nconst [ContextMenuProvider, useContextMenuContext] =\n  createContextMenuContext<ContextMenuContextValue>(CONTEXT_MENU_NAME);\n\ninterface ContextMenuProps {\n  children?: React.ReactNode;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  modal?: boolean;\n}\n\nconst ContextMenu: React.FC<ContextMenuProps> = (props: ScopedProps<ContextMenuProps>) => {\n  const { __scopeContextMenu, children, onOpenChange, dir, modal = true } = props;\n  const [open, setOpen] = React.useState(false);\n  const menuScope = useMenuScope(__scopeContextMenu);\n  const handleOpenChangeProp = useCallbackRef(onOpenChange);\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setOpen(open);\n      handleOpenChangeProp(open);\n    },\n    [handleOpenChangeProp]\n  );\n\n  return (\n    <ContextMenuProvider\n      scope={__scopeContextMenu}\n      open={open}\n      onOpenChange={handleOpenChange}\n      modal={modal}\n    >\n      <MenuPrimitive.Root\n        {...menuScope}\n        dir={dir}\n        open={open}\n        onOpenChange={handleOpenChange}\n        modal={modal}\n      >\n        {children}\n      </MenuPrimitive.Root>\n    </ContextMenuProvider>\n  );\n};\n\nContextMenu.displayName = CONTEXT_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'ContextMenuTrigger';\n\ntype ContextMenuTriggerElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface ContextMenuTriggerProps extends PrimitiveSpanProps {\n  disabled?: boolean;\n}\n\nconst ContextMenuTrigger = React.forwardRef<ContextMenuTriggerElement, ContextMenuTriggerProps>(\n  (props: ScopedProps<ContextMenuTriggerProps>, forwardedRef) => {\n    const { __scopeContextMenu, disabled = false, ...triggerProps } = props;\n    const context = useContextMenuContext(TRIGGER_NAME, __scopeContextMenu);\n    const menuScope = useMenuScope(__scopeContextMenu);\n    const pointRef = React.useRef<Point>({ x: 0, y: 0 });\n    const virtualRef = React.useRef({\n      getBoundingClientRect: () => DOMRect.fromRect({ width: 0, height: 0, ...pointRef.current }),\n    });\n    const longPressTimerRef = React.useRef(0);\n    const clearLongPress = React.useCallback(\n      () => window.clearTimeout(longPressTimerRef.current),\n      []\n    );\n    const handleOpen = (event: React.MouseEvent | React.PointerEvent) => {\n      pointRef.current = { x: event.clientX, y: event.clientY };\n      context.onOpenChange(true);\n    };\n\n    React.useEffect(() => clearLongPress, [clearLongPress]);\n    React.useEffect(() => void (disabled && clearLongPress()), [disabled, clearLongPress]);\n\n    return (\n      <>\n        <MenuPrimitive.Anchor {...menuScope} virtualRef={virtualRef} />\n        <Primitive.span\n          data-state={context.open ? 'open' : 'closed'}\n          data-disabled={disabled ? '' : undefined}\n          {...triggerProps}\n          ref={forwardedRef}\n          // prevent iOS context menu from appearing\n          style={{ WebkitTouchCallout: 'none', ...props.style }}\n          // if trigger is disabled, enable the native Context Menu\n          onContextMenu={\n            disabled\n              ? props.onContextMenu\n              : composeEventHandlers(props.onContextMenu, (event) => {\n                  // clearing the long press here because some platforms already support\n                  // long press to trigger a `contextmenu` event\n                  clearLongPress();\n                  handleOpen(event);\n                  event.preventDefault();\n                })\n          }\n          onPointerDown={\n            disabled\n              ? props.onPointerDown\n              : composeEventHandlers(\n                  props.onPointerDown,\n                  whenTouchOrPen((event) => {\n                    // clear the long press here in case there's multiple touch points\n                    clearLongPress();\n                    longPressTimerRef.current = window.setTimeout(() => handleOpen(event), 700);\n                  })\n                )\n          }\n          onPointerMove={\n            disabled\n              ? props.onPointerMove\n              : composeEventHandlers(props.onPointerMove, whenTouchOrPen(clearLongPress))\n          }\n          onPointerCancel={\n            disabled\n              ? props.onPointerCancel\n              : composeEventHandlers(props.onPointerCancel, whenTouchOrPen(clearLongPress))\n          }\n          onPointerUp={\n            disabled\n              ? props.onPointerUp\n              : composeEventHandlers(props.onPointerUp, whenTouchOrPen(clearLongPress))\n          }\n        />\n      </>\n    );\n  }\n);\n\nContextMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'ContextMenuPortal';\n\ntype MenuPortalProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;\ninterface ContextMenuPortalProps extends MenuPortalProps {}\n\nconst ContextMenuPortal: React.FC<ContextMenuPortalProps> = (\n  props: ScopedProps<ContextMenuPortalProps>\n) => {\n  const { __scopeContextMenu, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return <MenuPrimitive.Portal {...menuScope} {...portalProps} />;\n};\n\nContextMenuPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'ContextMenuContent';\n\ntype ContextMenuContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface ContextMenuContentProps\n  extends Omit<MenuContentProps, 'onEntryFocus' | 'side' | 'sideOffset' | 'align'> {}\n\nconst ContextMenuContent = React.forwardRef<ContextMenuContentElement, ContextMenuContentProps>(\n  (props: ScopedProps<ContextMenuContentProps>, forwardedRef) => {\n    const { __scopeContextMenu, ...contentProps } = props;\n    const context = useContextMenuContext(CONTENT_NAME, __scopeContextMenu);\n    const menuScope = useMenuScope(__scopeContextMenu);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <MenuPrimitive.Content\n        {...menuScope}\n        {...contentProps}\n        ref={forwardedRef}\n        side=\"right\"\n        sideOffset={2}\n        align=\"start\"\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented && hasInteractedOutsideRef.current) {\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented && !context.modal) hasInteractedOutsideRef.current = true;\n        }}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-context-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',\n            '--radix-context-menu-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-context-menu-content-available-height': 'var(--radix-popper-available-height)',\n            '--radix-context-menu-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-context-menu-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nContextMenuContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'ContextMenuGroup';\n\ntype ContextMenuGroupElement = React.ElementRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface ContextMenuGroupProps extends MenuGroupProps {}\n\nconst ContextMenuGroup = React.forwardRef<ContextMenuGroupElement, ContextMenuGroupProps>(\n  (props: ScopedProps<ContextMenuGroupProps>, forwardedRef) => {\n    const { __scopeContextMenu, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeContextMenu);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nContextMenuGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'ContextMenuLabel';\n\ntype ContextMenuLabelElement = React.ElementRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface ContextMenuLabelProps extends MenuLabelProps {}\n\nconst ContextMenuLabel = React.forwardRef<ContextMenuLabelElement, ContextMenuLabelProps>(\n  (props: ScopedProps<ContextMenuLabelProps>, forwardedRef) => {\n    const { __scopeContextMenu, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeContextMenu);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nContextMenuLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'ContextMenuItem';\n\ntype ContextMenuItemElement = React.ElementRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface ContextMenuItemProps extends MenuItemProps {}\n\nconst ContextMenuItem = React.forwardRef<ContextMenuItemElement, ContextMenuItemProps>(\n  (props: ScopedProps<ContextMenuItemProps>, forwardedRef) => {\n    const { __scopeContextMenu, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeContextMenu);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nContextMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'ContextMenuCheckboxItem';\n\ntype ContextMenuCheckboxItemElement = React.ElementRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface ContextMenuCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  ContextMenuCheckboxItemElement,\n  ContextMenuCheckboxItemProps\n>((props: ScopedProps<ContextMenuCheckboxItemProps>, forwardedRef) => {\n  const { __scopeContextMenu, ...checkboxItemProps } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n});\n\nContextMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'ContextMenuRadioGroup';\n\ntype ContextMenuRadioGroupElement = React.ElementRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface ContextMenuRadioGroupProps extends MenuRadioGroupProps {}\n\nconst ContextMenuRadioGroup = React.forwardRef<\n  ContextMenuRadioGroupElement,\n  ContextMenuRadioGroupProps\n>((props: ScopedProps<ContextMenuRadioGroupProps>, forwardedRef) => {\n  const { __scopeContextMenu, ...radioGroupProps } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n});\n\nContextMenuRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'ContextMenuRadioItem';\n\ntype ContextMenuRadioItemElement = React.ElementRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface ContextMenuRadioItemProps extends MenuRadioItemProps {}\n\nconst ContextMenuRadioItem = React.forwardRef<\n  ContextMenuRadioItemElement,\n  ContextMenuRadioItemProps\n>((props: ScopedProps<ContextMenuRadioItemProps>, forwardedRef) => {\n  const { __scopeContextMenu, ...radioItemProps } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n});\n\nContextMenuRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'ContextMenuItemIndicator';\n\ntype ContextMenuItemIndicatorElement = React.ElementRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface ContextMenuItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst ContextMenuItemIndicator = React.forwardRef<\n  ContextMenuItemIndicatorElement,\n  ContextMenuItemIndicatorProps\n>((props: ScopedProps<ContextMenuItemIndicatorProps>, forwardedRef) => {\n  const { __scopeContextMenu, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nContextMenuItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'ContextMenuSeparator';\n\ntype ContextMenuSeparatorElement = React.ElementRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface ContextMenuSeparatorProps extends MenuSeparatorProps {}\n\nconst ContextMenuSeparator = React.forwardRef<\n  ContextMenuSeparatorElement,\n  ContextMenuSeparatorProps\n>((props: ScopedProps<ContextMenuSeparatorProps>, forwardedRef) => {\n  const { __scopeContextMenu, ...separatorProps } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n});\n\nContextMenuSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'ContextMenuArrow';\n\ntype ContextMenuArrowElement = React.ElementRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface ContextMenuArrowProps extends MenuArrowProps {}\n\nconst ContextMenuArrow = React.forwardRef<ContextMenuArrowElement, ContextMenuArrowProps>(\n  (props: ScopedProps<ContextMenuArrowProps>, forwardedRef) => {\n    const { __scopeContextMenu, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeContextMenu);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nContextMenuArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'ContextMenuSub';\n\ninterface ContextMenuSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst ContextMenuSub: React.FC<ContextMenuSubProps> = (props: ScopedProps<ContextMenuSubProps>) => {\n  const { __scopeContextMenu, children, onOpenChange, open: openProp, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n      {children}\n    </MenuPrimitive.Sub>\n  );\n};\n\nContextMenuSub.displayName = SUB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'ContextMenuSubTrigger';\n\ntype ContextMenuSubTriggerElement = React.ElementRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface ContextMenuSubTriggerProps extends MenuSubTriggerProps {}\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  ContextMenuSubTriggerElement,\n  ContextMenuSubTriggerProps\n>((props: ScopedProps<ContextMenuSubTriggerProps>, forwardedRef) => {\n  const { __scopeContextMenu, ...triggerItemProps } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n  return <MenuPrimitive.SubTrigger {...menuScope} {...triggerItemProps} ref={forwardedRef} />;\n});\n\nContextMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'ContextMenuSubContent';\n\ntype ContextMenuSubContentElement = React.ElementRef<typeof MenuPrimitive.Content>;\ntype MenuSubContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;\ninterface ContextMenuSubContentProps extends MenuSubContentProps {}\n\nconst ContextMenuSubContent = React.forwardRef<\n  ContextMenuSubContentElement,\n  ContextMenuSubContentProps\n>((props: ScopedProps<ContextMenuSubContentProps>, forwardedRef) => {\n  const { __scopeContextMenu, ...subContentProps } = props;\n  const menuScope = useMenuScope(__scopeContextMenu);\n\n  return (\n    <MenuPrimitive.SubContent\n      {...menuScope}\n      {...subContentProps}\n      ref={forwardedRef}\n      style={{\n        ...props.style,\n        // re-namespace exposed content custom properties\n        ...{\n          '--radix-context-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',\n          '--radix-context-menu-content-available-width': 'var(--radix-popper-available-width)',\n          '--radix-context-menu-content-available-height': 'var(--radix-popper-available-height)',\n          '--radix-context-menu-trigger-width': 'var(--radix-popper-anchor-width)',\n          '--radix-context-menu-trigger-height': 'var(--radix-popper-anchor-height)',\n        },\n      }}\n    />\n  );\n});\n\nContextMenuSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction whenTouchOrPen<E>(handler: React.PointerEventHandler<E>): React.PointerEventHandler<E> {\n  return (event) => (event.pointerType !== 'mouse' ? handler(event) : undefined);\n}\n\nconst Root = ContextMenu;\nconst Trigger = ContextMenuTrigger;\nconst Portal = ContextMenuPortal;\nconst Content = ContextMenuContent;\nconst Group = ContextMenuGroup;\nconst Label = ContextMenuLabel;\nconst Item = ContextMenuItem;\nconst CheckboxItem = ContextMenuCheckboxItem;\nconst RadioGroup = ContextMenuRadioGroup;\nconst RadioItem = ContextMenuRadioItem;\nconst ItemIndicator = ContextMenuItemIndicator;\nconst Separator = ContextMenuSeparator;\nconst Arrow = ContextMenuArrow;\nconst Sub = ContextMenuSub;\nconst SubTrigger = ContextMenuSubTrigger;\nconst SubContent = ContextMenuSubContent;\n\nexport {\n  createContextMenuScope,\n  //\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuPortal,\n  ContextMenuContent,\n  ContextMenuGroup,\n  ContextMenuLabel,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuItemIndicator,\n  ContextMenuSeparator,\n  ContextMenuArrow,\n  ContextMenuSub,\n  ContextMenuSubTrigger,\n  ContextMenuSubContent,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  ContextMenuProps,\n  ContextMenuTriggerProps,\n  ContextMenuPortalProps,\n  ContextMenuContentProps,\n  ContextMenuGroupProps,\n  ContextMenuLabelProps,\n  ContextMenuItemProps,\n  ContextMenuCheckboxItemProps,\n  ContextMenuRadioGroupProps,\n  ContextMenuRadioItemProps,\n  ContextMenuItemIndicatorProps,\n  ContextMenuSeparatorProps,\n  ContextMenuArrowProps,\n  ContextMenuSubProps,\n  ContextMenuSubTriggerProps,\n  ContextMenuSubContentProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}