{"ast":null,"code":"\"use client\";\n\n// packages/react/avatar/src/Avatar.tsx\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar AVATAR_NAME = \"Avatar\";\nvar [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\nvar [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);\nvar Avatar = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAvatar,\n    ...avatarProps\n  } = props;\n  const [imageLoadingStatus, setImageLoadingStatus] = React.useState(\"idle\");\n  return /* @__PURE__ */jsx(AvatarProvider, {\n    scope: __scopeAvatar,\n    imageLoadingStatus,\n    onImageLoadingStatusChange: setImageLoadingStatus,\n    children: /* @__PURE__ */jsx(Primitive.span, {\n      ...avatarProps,\n      ref: forwardedRef\n    })\n  });\n});\nAvatar.displayName = AVATAR_NAME;\nvar IMAGE_NAME = \"AvatarImage\";\nvar AvatarImage = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAvatar,\n    src,\n    onLoadingStatusChange = () => {},\n    ...imageProps\n  } = props;\n  const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n  const imageLoadingStatus = useImageLoadingStatus(src, imageProps.referrerPolicy);\n  const handleLoadingStatusChange = useCallbackRef(status => {\n    onLoadingStatusChange(status);\n    context.onImageLoadingStatusChange(status);\n  });\n  useLayoutEffect(() => {\n    if (imageLoadingStatus !== \"idle\") {\n      handleLoadingStatusChange(imageLoadingStatus);\n    }\n  }, [imageLoadingStatus, handleLoadingStatusChange]);\n  return imageLoadingStatus === \"loaded\" ? /* @__PURE__ */jsx(Primitive.img, {\n    ...imageProps,\n    ref: forwardedRef,\n    src\n  }) : null;\n});\nAvatarImage.displayName = IMAGE_NAME;\nvar FALLBACK_NAME = \"AvatarFallback\";\nvar AvatarFallback = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeAvatar,\n    delayMs,\n    ...fallbackProps\n  } = props;\n  const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n  const [canRender, setCanRender] = React.useState(delayMs === void 0);\n  React.useEffect(() => {\n    if (delayMs !== void 0) {\n      const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n      return () => window.clearTimeout(timerId);\n    }\n  }, [delayMs]);\n  return canRender && context.imageLoadingStatus !== \"loaded\" ? /* @__PURE__ */jsx(Primitive.span, {\n    ...fallbackProps,\n    ref: forwardedRef\n  }) : null;\n});\nAvatarFallback.displayName = FALLBACK_NAME;\nfunction useImageLoadingStatus(src, referrerPolicy) {\n  const [loadingStatus, setLoadingStatus] = React.useState(\"idle\");\n  useLayoutEffect(() => {\n    if (!src) {\n      setLoadingStatus(\"error\");\n      return;\n    }\n    let isMounted = true;\n    const image = new window.Image();\n    const updateStatus = status => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n    setLoadingStatus(\"loading\");\n    image.onload = updateStatus(\"loaded\");\n    image.onerror = updateStatus(\"error\");\n    image.src = src;\n    if (referrerPolicy) {\n      image.referrerPolicy = referrerPolicy;\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [src, referrerPolicy]);\n  return loadingStatus;\n}\nvar Root = Avatar;\nvar Image = AvatarImage;\nvar Fallback = AvatarFallback;\nexport { Avatar, AvatarFallback, AvatarImage, Fallback, Image, Root, createAvatarScope };","map":{"version":3,"names":["React","createContextScope","useCallbackRef","useLayoutEffect","Primitive","jsx","AVATAR_NAME","createAvatarContext","createAvatarScope","AvatarProvider","useAvatarContext","Avatar","forwardRef","props","forwardedRef","__scopeAvatar","avatarProps","imageLoadingStatus","setImageLoadingStatus","useState","scope","onImageLoadingStatusChange","children","span","ref","displayName","IMAGE_NAME","AvatarImage","src","onLoadingStatusChange","imageProps","context","useImageLoadingStatus","referrerPolicy","handleLoadingStatusChange","status","img","FALLBACK_NAME","AvatarFallback","delayMs","fallbackProps","canRender","setCanRender","useEffect","timerId","window","setTimeout","clearTimeout","loadingStatus","setLoadingStatus","isMounted","image","Image","updateStatus","onload","onerror","Root","Fallback"],"sources":["C:\\Users\\Seulgi Baek\\vscode\\databasedesign\\database_project\\frontend\\node_modules\\@radix-ui\\react-avatar\\src\\Avatar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Avatar\n * -----------------------------------------------------------------------------------------------*/\n\nconst AVATAR_NAME = 'Avatar';\n\ntype ScopedProps<P> = P & { __scopeAvatar?: Scope };\nconst [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\n\ntype ImageLoadingStatus = 'idle' | 'loading' | 'loaded' | 'error';\n\ntype AvatarContextValue = {\n  imageLoadingStatus: ImageLoadingStatus;\n  onImageLoadingStatusChange(status: ImageLoadingStatus): void;\n};\n\nconst [AvatarProvider, useAvatarContext] = createAvatarContext<AvatarContextValue>(AVATAR_NAME);\n\ntype AvatarElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface AvatarProps extends PrimitiveSpanProps {}\n\nconst Avatar = React.forwardRef<AvatarElement, AvatarProps>(\n  (props: ScopedProps<AvatarProps>, forwardedRef) => {\n    const { __scopeAvatar, ...avatarProps } = props;\n    const [imageLoadingStatus, setImageLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n    return (\n      <AvatarProvider\n        scope={__scopeAvatar}\n        imageLoadingStatus={imageLoadingStatus}\n        onImageLoadingStatusChange={setImageLoadingStatus}\n      >\n        <Primitive.span {...avatarProps} ref={forwardedRef} />\n      </AvatarProvider>\n    );\n  }\n);\n\nAvatar.displayName = AVATAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarImage\n * -----------------------------------------------------------------------------------------------*/\n\nconst IMAGE_NAME = 'AvatarImage';\n\ntype AvatarImageElement = React.ElementRef<typeof Primitive.img>;\ntype PrimitiveImageProps = React.ComponentPropsWithoutRef<typeof Primitive.img>;\ninterface AvatarImageProps extends PrimitiveImageProps {\n  onLoadingStatusChange?: (status: ImageLoadingStatus) => void;\n}\n\nconst AvatarImage = React.forwardRef<AvatarImageElement, AvatarImageProps>(\n  (props: ScopedProps<AvatarImageProps>, forwardedRef) => {\n    const { __scopeAvatar, src, onLoadingStatusChange = () => {}, ...imageProps } = props;\n    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n    const imageLoadingStatus = useImageLoadingStatus(src, imageProps.referrerPolicy);\n    const handleLoadingStatusChange = useCallbackRef((status: ImageLoadingStatus) => {\n      onLoadingStatusChange(status);\n      context.onImageLoadingStatusChange(status);\n    });\n\n    useLayoutEffect(() => {\n      if (imageLoadingStatus !== 'idle') {\n        handleLoadingStatusChange(imageLoadingStatus);\n      }\n    }, [imageLoadingStatus, handleLoadingStatusChange]);\n\n    return imageLoadingStatus === 'loaded' ? (\n      <Primitive.img {...imageProps} ref={forwardedRef} src={src} />\n    ) : null;\n  }\n);\n\nAvatarImage.displayName = IMAGE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarFallback\n * -----------------------------------------------------------------------------------------------*/\n\nconst FALLBACK_NAME = 'AvatarFallback';\n\ntype AvatarFallbackElement = React.ElementRef<typeof Primitive.span>;\ninterface AvatarFallbackProps extends PrimitiveSpanProps {\n  delayMs?: number;\n}\n\nconst AvatarFallback = React.forwardRef<AvatarFallbackElement, AvatarFallbackProps>(\n  (props: ScopedProps<AvatarFallbackProps>, forwardedRef) => {\n    const { __scopeAvatar, delayMs, ...fallbackProps } = props;\n    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n    const [canRender, setCanRender] = React.useState(delayMs === undefined);\n\n    React.useEffect(() => {\n      if (delayMs !== undefined) {\n        const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n        return () => window.clearTimeout(timerId);\n      }\n    }, [delayMs]);\n\n    return canRender && context.imageLoadingStatus !== 'loaded' ? (\n      <Primitive.span {...fallbackProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nAvatarFallback.displayName = FALLBACK_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction useImageLoadingStatus(src?: string, referrerPolicy?: React.HTMLAttributeReferrerPolicy) {\n  const [loadingStatus, setLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n\n  useLayoutEffect(() => {\n    if (!src) {\n      setLoadingStatus('error');\n      return;\n    }\n\n    let isMounted = true;\n    const image = new window.Image();\n\n    const updateStatus = (status: ImageLoadingStatus) => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n\n    setLoadingStatus('loading');\n    image.onload = updateStatus('loaded');\n    image.onerror = updateStatus('error');\n    image.src = src;\n    if (referrerPolicy) {\n      image.referrerPolicy = referrerPolicy;\n    }\n\n    return () => {\n      isMounted = false;\n    };\n  }, [src, referrerPolicy]);\n\n  return loadingStatus;\n}\nconst Root = Avatar;\nconst Image = AvatarImage;\nconst Fallback = AvatarFallback;\n\nexport {\n  createAvatarScope,\n  //\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n  //\n  Root,\n  Image,\n  Fallback,\n};\nexport type { AvatarProps, AvatarImageProps, AvatarFallbackProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}