{"ast":null,"code":"\"use client\";\n\nimport * as o from \"react\";\nimport * as G from \"@radix-ui/react-checkbox\";\nimport { createCheckboxScope as R } from \"@radix-ui/react-checkbox\";\nimport { useComposedRefs as W } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope as D } from \"@radix-ui/react-context\";\nimport { Primitive as U } from \"@radix-ui/react-primitive\";\nimport * as I from \"@radix-ui/react-roving-focus\";\nimport { createRovingFocusGroupScope as g } from \"@radix-ui/react-roving-focus\";\nimport { useControllableState as A } from \"@radix-ui/react-use-controllable-state\";\nimport { useDirection as M } from \"@radix-ui/react-direction\";\nconst k = \"CheckboxGroup\",\n  [O, w] = D(k, [g, R]),\n  y = g(),\n  S = R(),\n  [T, B] = O(k),\n  x = o.forwardRef((r, i) => {\n    const {\n        __scopeCheckboxGroup: e,\n        name: p,\n        defaultValue: c,\n        value: t,\n        required: n = !1,\n        disabled: s = !1,\n        orientation: d,\n        dir: m,\n        loop: C = !0,\n        onValueChange: u,\n        ...h\n      } = r,\n      F = y(e),\n      v = M(m),\n      [_ = [], a] = A({\n        prop: t,\n        defaultProp: c,\n        onChange: u\n      }),\n      V = o.useCallback(l => a((b = []) => [...b, l]), [a]),\n      q = o.useCallback(l => a((b = []) => b.filter(N => N !== l)), [a]);\n    return o.createElement(T, {\n      scope: e,\n      name: p,\n      required: n,\n      disabled: s,\n      value: _,\n      onItemCheck: V,\n      onItemUncheck: q\n    }, o.createElement(I.Root, {\n      asChild: !0,\n      ...F,\n      orientation: d,\n      dir: v,\n      loop: C\n    }, o.createElement(U.div, {\n      role: \"group\",\n      \"data-disabled\": s ? \"\" : void 0,\n      dir: v,\n      ...h,\n      ref: i\n    })));\n  });\nx.displayName = k;\nconst E = \"CheckboxGroupItem\",\n  f = o.forwardRef((r, i) => {\n    const {\n        __scopeCheckboxGroup: e,\n        disabled: p,\n        ...c\n      } = r,\n      t = B(E, e),\n      n = t.disabled || p,\n      s = y(e),\n      d = S(e),\n      m = o.useRef(null),\n      C = W(i, m),\n      u = t.value?.includes(c.value);\n    return o.createElement(I.Item, {\n      asChild: !0,\n      ...s,\n      focusable: !n,\n      active: u\n    }, o.createElement(G.Root, {\n      name: t.name,\n      disabled: n,\n      required: t.required,\n      checked: u,\n      ...d,\n      ...c,\n      ref: C,\n      onCheckedChange: h => {\n        h ? t.onItemCheck(r.value) : t.onItemUncheck(r.value);\n      }\n    }));\n  });\nf.displayName = E;\nconst H = \"CheckboxGroupIndicator\",\n  P = o.forwardRef((r, i) => {\n    const {\n        __scopeCheckboxGroup: e,\n        ...p\n      } = r,\n      c = S(e);\n    return o.createElement(G.Indicator, {\n      ...c,\n      ...p,\n      ref: i\n    });\n  });\nP.displayName = H;\nconst K = x,\n  X = f,\n  j = P;\nexport { x as CheckboxGroup, P as CheckboxGroupIndicator, f as CheckboxGroupItem, j as Indicator, X as Item, K as Root, w as createCheckboxGroupScope };","map":{"version":3,"names":["o","G","createCheckboxScope","R","useComposedRefs","W","createContextScope","D","Primitive","U","I","createRovingFocusGroupScope","g","useControllableState","A","useDirection","M","k","O","w","y","S","T","B","x","forwardRef","r","i","__scopeCheckboxGroup","e","name","p","defaultValue","c","value","t","required","n","disabled","s","orientation","d","dir","m","loop","C","onValueChange","u","h","F","v","_","a","prop","defaultProp","onChange","V","useCallback","l","b","q","filter","N","createElement","scope","onItemCheck","onItemUncheck","Root","asChild","div","role","ref","displayName","E","f","useRef","includes","Item","focusable","active","checked","onCheckedChange","H","P","Indicator","K","X","j","CheckboxGroup","CheckboxGroupIndicator","CheckboxGroupItem","createCheckboxGroupScope"],"sources":["C:\\Users\\Seulgi Baek\\vscode\\databasedesign\\database_project\\frontend\\node_modules\\@radix-ui\\themes\\src\\components\\checkbox-group.primitive.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { createCheckboxScope } from '@radix-ui/react-checkbox';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroup\n * -----------------------------------------------------------------------------------------------*/\nconst CHECKBOX_GROUP_NAME = 'CheckboxGroup';\n\ntype ScopedProps<P> = P & { __scopeCheckboxGroup?: Scope };\nconst [createCheckboxGroupContext, createCheckboxGroupScope] = createContextScope(\n  CHECKBOX_GROUP_NAME,\n  [createRovingFocusGroupScope, createCheckboxScope]\n);\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\nconst useCheckboxScope = createCheckboxScope();\n\ntype CheckboxGroupContextValue = {\n  name?: string;\n  required: boolean;\n  disabled: boolean;\n  value?: string[];\n  onItemCheck(value: string): void;\n  onItemUncheck(value: string): void;\n};\n\nconst [CheckboxGroupProvider, useCheckboxGroupContext] =\n  createCheckboxGroupContext<CheckboxGroupContextValue>(CHECKBOX_GROUP_NAME);\n\ntype CheckboxGroupElement = React.ElementRef<typeof Primitive.div>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CheckboxGroupProps extends PrimitiveDivProps {\n  name?: CheckboxGroupContextValue['name'];\n  required?: React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>['required'];\n  disabled?: React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>['disabled'];\n  dir?: RovingFocusGroupProps['dir'];\n  orientation?: RovingFocusGroupProps['orientation'];\n  loop?: RovingFocusGroupProps['loop'];\n  defaultValue?: string[];\n  value?: CheckboxGroupContextValue['value'];\n  onValueChange?: (value: string[]) => void;\n}\n\nconst CheckboxGroup = React.forwardRef<CheckboxGroupElement, CheckboxGroupProps>(\n  (props: ScopedProps<CheckboxGroupProps>, forwardedRef) => {\n    const {\n      __scopeCheckboxGroup,\n      name,\n      defaultValue,\n      value: valueProp,\n      required = false,\n      disabled = false,\n      orientation,\n      dir,\n      loop = true,\n      onValueChange,\n      ...groupProps\n    } = props;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeCheckboxGroup);\n    const direction = useDirection(dir);\n    const [value = [], setValue] = useControllableState({\n      prop: valueProp,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    });\n\n    const handleItemCheck = React.useCallback(\n      (itemValue: string) => setValue((prevValue = []) => [...prevValue, itemValue]),\n      [setValue]\n    );\n\n    const handleItemUncheck = React.useCallback(\n      (itemValue: string) =>\n        setValue((prevValue = []) => prevValue.filter((value) => value !== itemValue)),\n      [setValue]\n    );\n\n    return (\n      <CheckboxGroupProvider\n        scope={__scopeCheckboxGroup}\n        name={name}\n        required={required}\n        disabled={disabled}\n        value={value}\n        onItemCheck={handleItemCheck}\n        onItemUncheck={handleItemUncheck}\n      >\n        <RovingFocusGroup.Root\n          asChild\n          {...rovingFocusGroupScope}\n          orientation={orientation}\n          dir={direction}\n          loop={loop}\n        >\n          <Primitive.div\n            role=\"group\"\n            data-disabled={disabled ? '' : undefined}\n            dir={direction}\n            {...groupProps}\n            ref={forwardedRef}\n          />\n        </RovingFocusGroup.Root>\n      </CheckboxGroupProvider>\n    );\n  }\n);\n\nCheckboxGroup.displayName = CHECKBOX_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'CheckboxGroupItem';\n\ntype CheckboxGroupItemElement = React.ElementRef<typeof CheckboxPrimitive.Root>;\ntype CheckboxProps = React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>;\ninterface CheckboxGroupItemProps\n  extends Omit<CheckboxProps, 'checked' | 'defaultChecked' | 'onCheckedChange' | 'name'> {\n  value: string;\n}\n\nconst CheckboxGroupItem = React.forwardRef<CheckboxGroupItemElement, CheckboxGroupItemProps>(\n  (props: ScopedProps<CheckboxGroupItemProps>, forwardedRef) => {\n    const { __scopeCheckboxGroup, disabled, ...itemProps } = props;\n    const context = useCheckboxGroupContext(ITEM_NAME, __scopeCheckboxGroup);\n    const isDisabled = context.disabled || disabled;\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeCheckboxGroup);\n    const checkboxScope = useCheckboxScope(__scopeCheckboxGroup);\n    const ref = React.useRef<React.ElementRef<typeof CheckboxPrimitive.Root>>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const checked = context.value?.includes(itemProps.value);\n\n    return (\n      <RovingFocusGroup.Item\n        asChild\n        {...rovingFocusGroupScope}\n        focusable={!isDisabled}\n        active={checked}\n      >\n        <CheckboxPrimitive.Root\n          name={context.name}\n          disabled={isDisabled}\n          required={context.required}\n          checked={checked}\n          {...checkboxScope}\n          {...itemProps}\n          ref={composedRefs}\n          onCheckedChange={(checked) => {\n            if (checked) {\n              context.onItemCheck(props.value);\n            } else {\n              context.onItemUncheck(props.value);\n            }\n          }}\n        />\n      </RovingFocusGroup.Item>\n    );\n  }\n);\n\nCheckboxGroupItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxGroupIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxGroupIndicator';\n\ntype CheckboxGroupIndicatorElement = React.ElementRef<typeof CheckboxPrimitive.Indicator>;\ntype CheckboxIndicatorProps = React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Indicator>;\ninterface CheckboxGroupIndicatorProps extends CheckboxIndicatorProps {}\n\nconst CheckboxGroupIndicator = React.forwardRef<\n  CheckboxGroupIndicatorElement,\n  CheckboxGroupIndicatorProps\n>((props: ScopedProps<CheckboxGroupIndicatorProps>, forwardedRef) => {\n  const { __scopeCheckboxGroup, ...indicatorProps } = props;\n  const checkboxScope = useCheckboxScope(__scopeCheckboxGroup);\n  return <CheckboxPrimitive.Indicator {...checkboxScope} {...indicatorProps} ref={forwardedRef} />;\n});\n\nCheckboxGroupIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst Root = CheckboxGroup;\nconst Item = CheckboxGroupItem;\nconst Indicator = CheckboxGroupIndicator;\n\nexport {\n  createCheckboxGroupScope,\n  //\n  CheckboxGroup,\n  CheckboxGroupItem,\n  CheckboxGroupIndicator,\n  //\n  Root,\n  Item,\n  Indicator,\n};\nexport type { CheckboxGroupProps, CheckboxGroupItemProps, CheckboxGroupIndicatorProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}