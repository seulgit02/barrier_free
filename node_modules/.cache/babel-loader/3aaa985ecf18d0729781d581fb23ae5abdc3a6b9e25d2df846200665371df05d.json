{"ast":null,"code":"\"use client\";\n\n// packages/react/switch/src/Switch.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { usePrevious } from \"@radix-ui/react-use-previous\";\nimport { useSize } from \"@radix-ui/react-use-size\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SWITCH_NAME = \"Switch\";\nvar [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);\nvar [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);\nvar Switch = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSwitch,\n    name,\n    checked: checkedProp,\n    defaultChecked,\n    required,\n    disabled,\n    value = \"on\",\n    onCheckedChange,\n    form,\n    ...switchProps\n  } = props;\n  const [button, setButton] = React.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, node => setButton(node));\n  const hasConsumerStoppedPropagationRef = React.useRef(false);\n  const isFormControl = button ? form || !!button.closest(\"form\") : true;\n  const [checked = false, setChecked] = useControllableState({\n    prop: checkedProp,\n    defaultProp: defaultChecked,\n    onChange: onCheckedChange\n  });\n  return /* @__PURE__ */jsxs(SwitchProvider, {\n    scope: __scopeSwitch,\n    checked,\n    disabled,\n    children: [/* @__PURE__ */jsx(Primitive.button, {\n      type: \"button\",\n      role: \"switch\",\n      \"aria-checked\": checked,\n      \"aria-required\": required,\n      \"data-state\": getState(checked),\n      \"data-disabled\": disabled ? \"\" : void 0,\n      disabled,\n      value,\n      ...switchProps,\n      ref: composedRefs,\n      onClick: composeEventHandlers(props.onClick, event => {\n        setChecked(prevChecked => !prevChecked);\n        if (isFormControl) {\n          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n          if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n        }\n      })\n    }), isFormControl && /* @__PURE__ */jsx(BubbleInput, {\n      control: button,\n      bubbles: !hasConsumerStoppedPropagationRef.current,\n      name,\n      value,\n      checked,\n      required,\n      disabled,\n      form,\n      style: {\n        transform: \"translateX(-100%)\"\n      }\n    })]\n  });\n});\nSwitch.displayName = SWITCH_NAME;\nvar THUMB_NAME = \"SwitchThumb\";\nvar SwitchThumb = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSwitch,\n    ...thumbProps\n  } = props;\n  const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n  return /* @__PURE__ */jsx(Primitive.span, {\n    \"data-state\": getState(context.checked),\n    \"data-disabled\": context.disabled ? \"\" : void 0,\n    ...thumbProps,\n    ref: forwardedRef\n  });\n});\nSwitchThumb.displayName = THUMB_NAME;\nvar BubbleInput = props => {\n  const {\n    control,\n    checked,\n    bubbles = true,\n    ...inputProps\n  } = props;\n  const ref = React.useRef(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n  React.useEffect(() => {\n    const input = ref.current;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event(\"click\", {\n        bubbles\n      });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n  return /* @__PURE__ */jsx(\"input\", {\n    type: \"checkbox\",\n    \"aria-hidden\": true,\n    defaultChecked: checked,\n    ...inputProps,\n    tabIndex: -1,\n    ref,\n    style: {\n      ...props.style,\n      ...controlSize,\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      opacity: 0,\n      margin: 0\n    }\n  });\n};\nfunction getState(checked) {\n  return checked ? \"checked\" : \"unchecked\";\n}\nvar Root = Switch;\nvar Thumb = SwitchThumb;\nexport { Root, Switch, SwitchThumb, Thumb, createSwitchScope };","map":{"version":3,"names":["React","composeEventHandlers","useComposedRefs","createContextScope","useControllableState","usePrevious","useSize","Primitive","jsx","jsxs","SWITCH_NAME","createSwitchContext","createSwitchScope","SwitchProvider","useSwitchContext","Switch","forwardRef","props","forwardedRef","__scopeSwitch","name","checked","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","form","switchProps","button","setButton","useState","composedRefs","node","hasConsumerStoppedPropagationRef","useRef","isFormControl","closest","setChecked","prop","defaultProp","onChange","scope","children","type","role","getState","ref","onClick","event","prevChecked","current","isPropagationStopped","stopPropagation","BubbleInput","control","bubbles","style","transform","displayName","THUMB_NAME","SwitchThumb","thumbProps","context","span","inputProps","controlSize","useEffect","input","inputProto","window","HTMLInputElement","prototype","descriptor","Object","getOwnPropertyDescriptor","set","Event","call","dispatchEvent","tabIndex","position","pointerEvents","opacity","margin","Root","Thumb"],"sources":["C:\\Users\\Seulgi Baek\\vscode\\databasedesign\\database_project\\frontend\\node_modules\\@radix-ui\\react-switch\\src\\Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Switch\n * -----------------------------------------------------------------------------------------------*/\n\nconst SWITCH_NAME = 'Switch';\n\ntype ScopedProps<P> = P & { __scopeSwitch?: Scope };\nconst [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);\n\ntype SwitchContextValue = { checked: boolean; disabled?: boolean };\nconst [SwitchProvider, useSwitchContext] = createSwitchContext<SwitchContextValue>(SWITCH_NAME);\n\ntype SwitchElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SwitchProps extends PrimitiveButtonProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  required?: boolean;\n  onCheckedChange?(checked: boolean): void;\n}\n\nconst Switch = React.forwardRef<SwitchElement, SwitchProps>(\n  (props: ScopedProps<SwitchProps>, forwardedRef) => {\n    const {\n      __scopeSwitch,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      form,\n      ...switchProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? form || !!button.closest('form') : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange,\n    });\n\n    return (\n      <SwitchProvider scope={__scopeSwitch} checked={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"switch\"\n          aria-checked={checked}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...switchProps}\n          ref={composedRefs}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => !prevChecked);\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if switch is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect switch updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            form={form}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </SwitchProvider>\n    );\n  }\n);\n\nSwitch.displayName = SWITCH_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SwitchThumb\n * -----------------------------------------------------------------------------------------------*/\n\nconst THUMB_NAME = 'SwitchThumb';\n\ntype SwitchThumbElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SwitchThumbProps extends PrimitiveSpanProps {}\n\nconst SwitchThumb = React.forwardRef<SwitchThumbElement, SwitchThumbProps>(\n  (props: ScopedProps<SwitchThumbProps>, forwardedRef) => {\n    const { __scopeSwitch, ...thumbProps } = props;\n    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n    return (\n      <Primitive.span\n        data-state={getState(context.checked)}\n        data-disabled={context.disabled ? '' : undefined}\n        {...thumbProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nSwitchThumb.displayName = THUMB_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = React.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: boolean;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      setChecked.call(input, checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"checkbox\"\n      aria-hidden\n      defaultChecked={checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction getState(checked: boolean) {\n  return checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Switch;\nconst Thumb = SwitchThumb;\n\nexport {\n  createSwitchScope,\n  //\n  Switch,\n  SwitchThumb,\n  //\n  Root,\n  Thumb,\n};\nexport type { SwitchProps, SwitchThumbProps };\n"],"mappings":";;;AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,oBAAA,QAA4B;AACrC,SAASC,eAAA,QAAuB;AAChC,SAASC,kBAAA,QAA0B;AACnC,SAASC,oBAAA,QAA4B;AACrC,SAASC,WAAA,QAAmB;AAC5B,SAASC,OAAA,QAAe;AACxB,SAASC,SAAA,QAAiB;AAmDpB,SACEC,GAAA,EADFC,IAAA;AA3CN,IAAMC,WAAA,GAAc;AAGpB,IAAM,CAACC,mBAAA,EAAqBC,iBAAiB,IAAIT,kBAAA,CAAmBO,WAAW;AAG/E,IAAM,CAACG,cAAA,EAAgBC,gBAAgB,IAAIH,mBAAA,CAAwCD,WAAW;AAW9F,IAAMK,MAAA,GAAef,KAAA,CAAAgB,UAAA,CACnB,CAACC,KAAA,EAAiCC,YAAA,KAAiB;EACjD,MAAM;IACJC,aAAA;IACAC,IAAA;IACAC,OAAA,EAASC,WAAA;IACTC,cAAA;IACAC,QAAA;IACAC,QAAA;IACAC,KAAA,GAAQ;IACRC,eAAA;IACAC,IAAA;IACA,GAAGC;EACL,IAAIZ,KAAA;EACJ,MAAM,CAACa,MAAA,EAAQC,SAAS,IAAU/B,KAAA,CAAAgC,QAAA,CAAmC,IAAI;EACzE,MAAMC,YAAA,GAAe/B,eAAA,CAAgBgB,YAAA,EAAegB,IAAA,IAASH,SAAA,CAAUG,IAAI,CAAC;EAC5E,MAAMC,gCAAA,GAAyCnC,KAAA,CAAAoC,MAAA,CAAO,KAAK;EAE3D,MAAMC,aAAA,GAAgBP,MAAA,GAASF,IAAA,IAAQ,CAAC,CAACE,MAAA,CAAOQ,OAAA,CAAQ,MAAM,IAAI;EAClE,MAAM,CAACjB,OAAA,GAAU,OAAOkB,UAAU,IAAInC,oBAAA,CAAqB;IACzDoC,IAAA,EAAMlB,WAAA;IACNmB,WAAA,EAAalB,cAAA;IACbmB,QAAA,EAAUf;EACZ,CAAC;EAED,OACE,eAAAlB,IAAA,CAACI,cAAA;IAAe8B,KAAA,EAAOxB,aAAA;IAAeE,OAAA;IAAkBI,QAAA;IACtDmB,QAAA,kBAAApC,GAAA,CAACD,SAAA,CAAUuB,MAAA,EAAV;MACCe,IAAA,EAAK;MACLC,IAAA,EAAK;MACL,gBAAczB,OAAA;MACd,iBAAeG,QAAA;MACf,cAAYuB,QAAA,CAAS1B,OAAO;MAC5B,iBAAeI,QAAA,GAAW,KAAK;MAC/BA,QAAA;MACAC,KAAA;MACC,GAAGG,WAAA;MACJmB,GAAA,EAAKf,YAAA;MACLgB,OAAA,EAAShD,oBAAA,CAAqBgB,KAAA,CAAMgC,OAAA,EAAUC,KAAA,IAAU;QACtDX,UAAA,CAAYY,WAAA,IAAgB,CAACA,WAAW;QACxC,IAAId,aAAA,EAAe;UACjBF,gCAAA,CAAiCiB,OAAA,GAAUF,KAAA,CAAMG,oBAAA,CAAqB;UAItE,IAAI,CAAClB,gCAAA,CAAiCiB,OAAA,EAASF,KAAA,CAAMI,eAAA,CAAgB;QACvE;MACF,CAAC;IAAA,CACH,GACCjB,aAAA,IACC,eAAA7B,GAAA,CAAC+C,WAAA;MACCC,OAAA,EAAS1B,MAAA;MACT2B,OAAA,EAAS,CAACtB,gCAAA,CAAiCiB,OAAA;MAC3ChC,IAAA;MACAM,KAAA;MACAL,OAAA;MACAG,QAAA;MACAC,QAAA;MACAG,IAAA;MAIA8B,KAAA,EAAO;QAAEC,SAAA,EAAW;MAAoB;IAAA,CAC1C;EAAA,CAEJ;AAEJ,CACF;AAEA5C,MAAA,CAAO6C,WAAA,GAAclD,WAAA;AAMrB,IAAMmD,UAAA,GAAa;AAMnB,IAAMC,WAAA,GAAoB9D,KAAA,CAAAgB,UAAA,CACxB,CAACC,KAAA,EAAsCC,YAAA,KAAiB;EACtD,MAAM;IAAEC,aAAA;IAAe,GAAG4C;EAAW,IAAI9C,KAAA;EACzC,MAAM+C,OAAA,GAAUlD,gBAAA,CAAiB+C,UAAA,EAAY1C,aAAa;EAC1D,OACE,eAAAX,GAAA,CAACD,SAAA,CAAU0D,IAAA,EAAV;IACC,cAAYlB,QAAA,CAASiB,OAAA,CAAQ3C,OAAO;IACpC,iBAAe2C,OAAA,CAAQvC,QAAA,GAAW,KAAK;IACtC,GAAGsC,UAAA;IACJf,GAAA,EAAK9B;EAAA,CACP;AAEJ,CACF;AAEA4C,WAAA,CAAYF,WAAA,GAAcC,UAAA;AAW1B,IAAMN,WAAA,GAAetC,KAAA,IAA4B;EAC/C,MAAM;IAAEuC,OAAA;IAASnC,OAAA;IAASoC,OAAA,GAAU;IAAM,GAAGS;EAAW,IAAIjD,KAAA;EAC5D,MAAM+B,GAAA,GAAYhD,KAAA,CAAAoC,MAAA,CAAyB,IAAI;EAC/C,MAAMe,WAAA,GAAc9C,WAAA,CAAYgB,OAAO;EACvC,MAAM8C,WAAA,GAAc7D,OAAA,CAAQkD,OAAO;EAG7BxD,KAAA,CAAAoE,SAAA,CAAU,MAAM;IACpB,MAAMC,KAAA,GAAQrB,GAAA,CAAII,OAAA;IAClB,MAAMkB,UAAA,GAAaC,MAAA,CAAOC,gBAAA,CAAiBC,SAAA;IAC3C,MAAMC,UAAA,GAAaC,MAAA,CAAOC,wBAAA,CAAyBN,UAAA,EAAY,SAAS;IACxE,MAAM/B,UAAA,GAAamC,UAAA,CAAWG,GAAA;IAC9B,IAAI1B,WAAA,KAAgB9B,OAAA,IAAWkB,UAAA,EAAY;MACzC,MAAMW,KAAA,GAAQ,IAAI4B,KAAA,CAAM,SAAS;QAAErB;MAAQ,CAAC;MAC5ClB,UAAA,CAAWwC,IAAA,CAAKV,KAAA,EAAOhD,OAAO;MAC9BgD,KAAA,CAAMW,aAAA,CAAc9B,KAAK;IAC3B;EACF,GAAG,CAACC,WAAA,EAAa9B,OAAA,EAASoC,OAAO,CAAC;EAElC,OACE,eAAAjD,GAAA,CAAC;IACCqC,IAAA,EAAK;IACL,eAAW;IACXtB,cAAA,EAAgBF,OAAA;IACf,GAAG6C,UAAA;IACJe,QAAA,EAAU;IACVjC,GAAA;IACAU,KAAA,EAAO;MACL,GAAGzC,KAAA,CAAMyC,KAAA;MACT,GAAGS,WAAA;MACHe,QAAA,EAAU;MACVC,aAAA,EAAe;MACfC,OAAA,EAAS;MACTC,MAAA,EAAQ;IACV;EAAA,CACF;AAEJ;AAEA,SAAStC,SAAS1B,OAAA,EAAkB;EAClC,OAAOA,OAAA,GAAU,YAAY;AAC/B;AAEA,IAAMiE,IAAA,GAAOvE,MAAA;AACb,IAAMwE,KAAA,GAAQzB,WAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}